# comp-inf-app {
#   routes {
#     # If ask takes more time than this to complete the request is failed
#     ask-timeout = 5s
#   }
#
#   priority-mailbox {
#     mailbox-type = "it.polimi.mw.compinf.PriorityMailbox"
#   }
# }
#
# my-blocking-dispatcher {
#   type = Dispatcher
#   executor = "thread-pool-executor"
#   thread-pool-executor {
#     fixed-pool-size = 16
#   }
#   throughput = 1
# }
#
# akka.actor.deployment {
#   /actorRouter {
#     router = balancing-pool
#     nr-of-instances = 5
#
#     pool-dispatcher {
#       mailbox = comp-inf-app.priority-mailbox
#     }
#   }
# }

akka {
  cluster {
    seed-nodes = ["akka://cluster@127.0.0.1:25565"]
    downing-provider-class = "akka.cluster.sbr.SplitBrainResolverProvider"
  }

  remote {
    netty.tcp {
      hostname = "127.0.0.1"
      port = 0 # port set in Runner class
    }
  }
  remote.artery {
    canonical {
      hostname = "127.0.0.1"
      port = 0 # port set in Runner class
    }
  }

  actor {
    provider = "cluster"
    allow-java-serialization = off

    serializers {
      fst = "testCluster.FstSerializer"
    }

    serialization-bindings {
    }

    deployment {
      /producer/workerRouter = {
        # Router type provided by metrics extension.
        router = cluster-metrics-adaptive-group
        # Router parameter specific for metrics extension.
        # metrics-selector = heap
        # metrics-selector = load
        # metrics-selector = cpu
        metrics-selector = mix
        #
        routees.paths = ["/user/worker"]
        cluster {
          enabled = on
          use-roles = ["workers"]
          allow-local-routees = off
        }
      }
    }
  }
}

akka.extensions = ["akka.cluster.metrics.ClusterMetricsExtension"]